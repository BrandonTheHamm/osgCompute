/* osgCompute - Copyright (C) 2008-2009 SVT Group
*                                                                     
* This library is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as
* published by the Free Software Foundation; either version 3 of
* the License, or (at your option) any later version.
*                                                                     
* This library is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of 
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesse General Public License for more details.
*
* The full license is in LICENSE file included with this distribution.
*/

#ifndef OSGCUDA_PROGRAM
#define OSGCUDA_PROGRAM 1

#include <osgCompute/Program>
#include <osgCompute/Visitor>
#include <osgCuda/Export>
#include <osgViewer/ViewerBase>

//! \namespace osgCuda CUDA functionality 
/** \namespace osgCuda 
	Defines the namespace for all CUDA classes that
	implement the osgCompute interfaces for the CUDA API.
*/ 
namespace osgCuda
{

	/** Sets the CUDA device. Use the OpenGL device ID here if synchronization
	between GL and CUDA memory space should be fast. All resources can only use a single
	device. The current implementation of osgCuda does not support handling of
	multiple devices. The default device is the first to be found.
	@param[in] device The ID of the CUDA device.
	*/
    bool LIBRARY_EXPORT setupOsgCudaDevice( int device );

	/** Setup and links the CUDA device to a Viewer's OpenGL context. Use the OpenGL device 
    ID here if synchronization between GL and CUDA memory space should be fast. All resources 
    can only use a single device. The current implementation of osgCuda does not support handling of
	multiple devices. The default device is the first to be found.
    @param[in] viewer The viewer for which CUDA should be initialized.
	@param[in] device The ID of the CUDA device.
    @return Returns true on success.
	*/
    bool LIBRARY_EXPORT setupOsgCudaAndViewer( osgViewer::ViewerBase& viewer, int device = 0 );

	//! Class for CUDA computations and resources.
	/** The osgCuda::Program class implements the CUDA device handling. The 
	resource handling is unchanged from osgCompute::Program. Please see 
	osgCompute::Program for the resource handling.
    */
    class LIBRARY_EXPORT Program : public osgCompute::Program
    {
    public:
		/** Constructor. 
		*/
        Program();

        META_Program( osgCuda, Program, osgCompute, ProgramBin );

		/** Releases all resources attached to the program including computations
		*/
		virtual void clear();

    protected:
		/** Destructor will release all resources first.
		*/
        virtual ~Program() { clearLocal(); }

		/** Checks the CUDA device. If it is not ready yet then it will be setup by
		calling setupDevice().
		*/
        virtual void checkDevice();

    private:
        // copy constructor and operator should not be called
        Program( const Program&, const osg::CopyOp& ) {}
		Program &operator=(const Program &) { return *this; }

		void clearLocal();
    };
}

#endif //OSGCUDA_PROGRAM
