/* osgCompute - Copyright (C) 2008-2009 SVT Group
*                                                                     
* This library is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as
* published by the Free Software Foundation; either version 3 of
* the License, or (at your option) any later version.
*                                                                     
* This library is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of 
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesse General Public License for more details.
*
* The full license is in LICENSE file included with this distribution.
*/

#ifndef OSGCOMPUTE_VISITOR
#define OSGCOMPUTE_VISITOR 1

#include <osg/NodeVisitor>
#include <osgCompute/Export>
#include <osgCompute/Resource>

namespace osgCompute
{
    class Computation;

    /**
    */
    class LIBRARY_EXPORT ResourceVisitor : public osg::NodeVisitor
    {
    public:
        enum Mode
        {
            NONE =          0x0,
            COLLECT =       0x1,
            DISTRIBUTE =    0x2,
            EXCHANGE =      0x4,
            RESET =         0x8,
        };

    public:
        ResourceVisitor();

        META_NodeVisitor( osgCompute, ResourceVisitor )

        virtual void apply( osg::Node& node );
        virtual void collect( osg::Node& node );
        virtual void distribute( osg::Node& node );
        virtual void exchange( osg::Node& node );

        virtual void setMode( unsigned int mode );
        virtual unsigned int getMode();

        virtual void addResource( Resource& resource );
        virtual void removeResource( Resource& resource );
        virtual bool hasResource( Resource& resource );
        virtual ResourceSet& getResources();
        virtual const ResourceSet& getResources() const;

        virtual void reset();
    protected:
        friend class Computation;
        virtual ~ResourceVisitor() { clearLocal(); }
        void clearLocal();

        ResourceSet                       _collectedResources;
        unsigned int                      _mode;
        unsigned int                      _currentMode;

    private:
        // copy constructor and operator should not be called
        ResourceVisitor( const ResourceVisitor&, const osg::CopyOp& ) {}
        ResourceVisitor& operator=( const ResourceVisitor& copy ) { return (*this); }
    };
}

#endif //OSGCOMPUTE_VISITOR
