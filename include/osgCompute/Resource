/* osgCompute - Copyright (C) 2008-2009 SVT Group
*                                                                     
* This library is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as
* published by the Free Software Foundation; either version 3 of
* the License, or (at your option) any later version.
*                                                                     
* This library is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of 
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesse General Public License for more details.
*
* The full license is in LICENSE file included with this distribution.
*/

#ifndef OSGCOMPUTE_RESOURCE
#define OSGCOMPUTE_RESOURCE 1

#include <vector>
#include <set>
#include <map>
#include <osg/ref_ptr>
#include <osg/Referenced>
#include <osgCompute/Export>
#include <osgCompute/Callback>

namespace osgCompute
{
    typedef std::set< std::string >                                           	IdentifierSet;
    typedef std::set< std::string >::iterator                                 	IdentifierSetItr;
    typedef std::set< std::string >::const_iterator                           	IdentifierSetCnstItr;

    typedef std::vector< osg::ref_ptr<Resource> >                              	ResourceList;
    typedef std::vector< osg::ref_ptr<Resource> >::iterator                    	ResourceListItr;
    typedef std::vector< osg::ref_ptr<Resource> >::const_iterator              	ResourceListCnstItr;

    typedef std::set< osg::ref_ptr<Resource> >                                  ResourceSet;
    typedef std::set< osg::ref_ptr<Resource> >::iterator                        ResourceSetItr;
    typedef std::set< osg::ref_ptr<Resource> >::const_iterator                  ResourceSetCnstItr;

    /**
    */
    class LIBRARY_EXPORT Resource : public osg::Object
    {
    public:
        Resource();

        virtual bool init();

        virtual void addIdentifier( const std::string& handle );
        virtual void removeIdentifier( const std::string& handle );
        virtual bool isIdentifiedBy( const std::string& handle ) const;
        virtual void setIdentifiers( IdentifierSet& handles );
        virtual IdentifierSet& getIdentifiers();
        virtual const IdentifierSet& getIdentifiers() const;

        virtual bool isClear() const;
        virtual void clear();

        static void bindToContextID( unsigned int contextID );
        static void clearContextID();
        static unsigned int getContextID();

        /**
        * Frees all memory associated with this resource. Is called implicitly during clear().
        */
        virtual void clearObject();

    protected:
        virtual ~Resource();

        void clearLocal();

        IdentifierSet                       _identifiers;
        bool                                _clear;

        static unsigned int                 s_contextID;
    private:
        friend class Context;
        // copy constructor and operator should not be called
        Resource(const Resource& ,const osg::CopyOp& ) {}
        Resource &operator=(const Resource&) { return *this; }
    };
}

#endif //OSGCOMPUTE_RESOURCE
