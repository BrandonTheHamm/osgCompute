/* osgCompute - Copyright (C) 2008-2009 SVT Group
 *                                                                     
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 3 of
 * the License, or (at your option) any later version.
 *                                                                     
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesse General Public License for more details.
 *
 * The full license is in LICENSE file included with this distribution.
*/

#ifndef OSGCOMPUTE_PARAM
#define OSGCOMPUTE_PARAM 1

#include <vector>
#include <map>
#include <osg/ref_ptr>
#include <osg/Object>
#include <osgCompute/Export>
#include <osgCompute/Context>
#include <osgCompute/Callback>

namespace osgCompute
{
    class Module;

#define META_Resource( libraryname, classname, asModuleType )						\
    META_Object( libraryname, classname )											\
    virtual osg::Object* asObject() { return this; }								\
    virtual const osg::Object* asObject() const { return this; }					\
	virtual void release() { this->unref(); }
	
    /**
    */
	class LIBRARY_EXPORT Resource
    {
    public:
		Resource();

		virtual void release() = 0;
        virtual osg::Object* asObject() = 0;
        virtual const osg::Object* asObject() const = 0;

        virtual bool init();

        virtual void setUpdateResourceCallback( ResourceCallback* uc );
        virtual ResourceCallback* getUpdateResourceCallback();
        virtual const ResourceCallback* getUpdateResourceCallback() const;
        virtual void setEventResourceCallback( ResourceCallback* ec );
        virtual ResourceCallback* getEventResourceCallback();
        virtual const ResourceCallback* getEventResourceCallback() const;

        virtual void addHandle( const std::string& handle );
        virtual void removeHandle( const std::string& handle );
        virtual bool isAddressedByHandle( const std::string& handle );

        virtual bool isClear() const;
        virtual void clear();

	protected:
		virtual ~Resource();
        friend class Context;

        void clearLocal();

        virtual bool init( const Context& context ) const;
        virtual void clear( const Context& context ) const;
        virtual const Context* getContext( unsigned int ctxId ) const;

        mutable ContextSet                  _contexts;

        osg::ref_ptr<ResourceCallback>      _updateCallback;
        osg::ref_ptr<ResourceCallback>      _eventCallback;
        HandleSet                           _handles;
        bool                                _clear;

    private:
        // copy constructor and operator should not be called
        Resource(const Resource& ,const osg::CopyOp& ) {}
        Resource &operator=(const Resource&) { return *this; }
    };
}

#endif //OSGCOMPUTE_PARAM
