/* osgCompute - Copyright (C) 2008-2009 SVT Group
*                                                                     
* This library is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as
* published by the Free Software Foundation; either version 3 of
* the License, or (at your option) any later version.
*                                                                     
* This library is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of 
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesse General Public License for more details.
*
* The full license is in LICENSE file included with this distribution.
*/

#ifndef OSGCOMPUTE_RESOURCE
#define OSGCOMPUTE_RESOURCE 1

#include <vector>
#include <set>
#include <map>
#include <osg/ref_ptr>
#include <osg/Observer>
#include <osg/observer_ptr>
#include <osg/Referenced>
#include <osgCompute/Export>
#include <osgCompute/Callback>

namespace osgCompute
{
	class Resource;
	
    typedef std::set< std::string >                                           	        IdentifierSet;
    typedef std::set< std::string >::iterator                                 	        IdentifierSetItr;
    typedef std::set< std::string >::const_iterator                           	        IdentifierSetCnstItr;

    typedef std::vector< osg::ref_ptr< Resource > >                              	    ResourceList;
    typedef std::vector< osg::ref_ptr< Resource > >::iterator                    	    ResourceListItr;
    typedef std::vector< osg::ref_ptr< Resource > >::const_iterator              	    ResourceListCnstItr;

    typedef std::set< osg::ref_ptr< Resource > >                                        ResourceSet;
    typedef std::set< osg::ref_ptr< Resource > >::iterator                              ResourceSetItr;
    typedef std::set< osg::ref_ptr< Resource > >::const_iterator                        ResourceSetCnstItr;

    typedef std::list< osg::observer_ptr< Resource > >                                  ResourceClassList;
    typedef std::list< osg::observer_ptr< Resource > >::iterator                        ResourceClassListItr;
    typedef std::list< osg::observer_ptr< Resource > >::const_iterator                  ResourceClassListCnstItr;

    typedef std::multimap< std::string, osg::observer_ptr<Resource> >                   ObserverMap;
    typedef std::multimap< std::string, osg::observer_ptr<Resource> >::iterator         ObserverMapItr;
    typedef std::multimap< std::string, osg::observer_ptr<Resource> >::const_iterator   ObserverMapCnstItr;



    //! Base class to observe all existing resources.
    /**
    */
    class LIBRARY_EXPORT ResourceObserver : public osg::Observer, public osg::Referenced
    {
    public:
        /** Returns singleton pointer. If it does not exist it will be allocated first.
            @param[in] erase if true the ResourceObserver will be deleted.
            @return Returns a pointer to the ResourceObserver 
        */
        static ResourceObserver* instance();

        /** Returns all resources of the specified resource type.
            @param[in] classIdentifier the unique name of the resource class which has the following structure: "libraryName::className".
            @return Returns a list of const pointers of all resources with class name.
        */
        ResourceClassList getResources( std::string classIdentifier ) const;

        /** Calls releaseObject() for all resources. Might be called before OpenGL context is removed.
        */
        void releaseAllResourceObjects();
        
        /** Add new resource to observer. Will be called in resource constructor.
            @param[in] resource a reference to the resource.
        */
        virtual void observeResource( Resource& resource );
    protected:
        friend class Resource;

        /** Constructor
        */
        ResourceObserver();

        /** Destructor
        */
        virtual ~ResourceObserver();


        /** Removes resource from resource observer.
            @param[in] object a pointer to the deleted resource.
        */
        virtual void objectDeleted(void* object);

    private:

        ObserverMap                             _observedObjects;
        static osg::ref_ptr<ResourceObserver>   s_resourceObserver;
    };

	//! Base class for resources 
    /** 
		Abstract base class for device dependent objects.
		Any object that is in any way connected with a device 
		context should derive from osgCompute::Resource, 
		like Memory or Computation objects. Resources have 
		string identifiers to uniquely distinguish between 
		different resources of the same type.
		\code
		osg::ref_ptr<osgCompute::Resource> resourceA = new osgCuda::Buffer;
		resourceA->addIdentifier("INPUT RESOURCE");
		osg::ref_ptr<osgCompute::Resource> resourceB = new osgCuda::Buffer;
		resourceA->addIdentifier("OUTPUT RESOURCE");
		\endcode
		Each computation will check for these names during acceptResource() 
		in order to identify its resources of interest.
    */
    class LIBRARY_EXPORT Resource : public osg::Object
    {
    public:
		/** Constructor. Identifier list is empty by default.
		*/
        Resource();

        META_Object( osgCompute, Resource );

		/** Adds a identifier to the resource
		@param[in] identifier new string identifier of the resource.
		*/
        virtual void addIdentifier( const std::string& identifier );
        
		/** Removes identifier from the resource
		@param[in] identifier string identifier to remove.
		*/
		virtual void removeIdentifier( const std::string& identifier );

        /** Removes all identifiers from the resource
		*/
		virtual void removeAllIdentifiers();
        
		/** Returns true if the resource is identified by identifier.
		@return Returns true if identifier is found. Returns false if 
		it is not.
		*/
		virtual bool isIdentifiedBy( const std::string& identifier ) const;
    		
		/** Add unique identifiers to the resource.
		@param[in] identifiers List of identifiers.
		*/    
		virtual void setIdentifiers( IdentifierSet& identifiers );
        
		/** Returns all identifiers of the resource.
		@return Returns a reference to the list with all identifiers.
		*/ 	
		virtual IdentifierSet& getIdentifiers();

		/** Returns all identifiers of the resource.
		@return Returns a reference to the list with all identifiers.
		*/ 	
        virtual const IdentifierSet& getIdentifiers() const;

        /** clear() will set all parameters of a resource to default.
        Calls releaseObjects() as well.
        */
        virtual void clear();

        /** Release all allocations associated with this resource. 
        */
        virtual void releaseObjects();

        /** Returns true if all allocations by a resource are released. 
        @return Returns true if all allocations of a resource are released.
        */
        virtual bool objectsReleased();

        /** Releases all allocated objects associated with the applied state. 
        @param[in] state the current OpenGL state.
        */
        virtual void releaseGLObjects(osg::State* state);

    protected:
		/** Destructor.
		*/
        virtual ~Resource();

        /** Call objectsCreated() from a specialized class in case some memory has been 
        allocated for internal use.
		*/
        virtual void objectsCreated() const;

	private:
		// Copy constructor and operator should not be called
		Resource(const Resource& ,const osg::CopyOp& ) {}
		Resource &operator=(const Resource&) { return *this; }

		IdentifierSet _identifiers;
        mutable bool  _objectsReleased;

    };
}

#endif //OSGCOMPUTE_RESOURCE
