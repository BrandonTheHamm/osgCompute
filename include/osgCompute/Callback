/* osgCompute - Copyright (C) 2008-2009 SVT Group
*                                                                     
* This library is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as
* published by the Free Software Foundation; either version 3 of
* the License, or (at your option) any later version.
*                                                                     
* This library is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of 
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesse General Public License for more details.
*
* The full license is in LICENSE file included with this distribution.
*/

#ifndef OSGCOMPUTE_CALLBACK
#define OSGCOMPUTE_CALLBACK 1

#include <osg/Object>
#include <osg/observer_ptr>
#include <osg/NodeVisitor>
#include <osg/Drawable>
#include <osg/Camera>
#include <osgCompute/Export>

namespace osgCompute
{
    class Resource;
    class Computation;
    class Program;
    class GLMemory;

    //! Interface for customized event or update code    
    /** A ComputationCallback is utilized for adding event or update 
    functionality to computations. A ComputationCallback allows users to 
    change the default update or event handling for computations.
    */
    class LIBRARY_EXPORT ComputationCallback : public virtual osg::Object
    {
    public:
        /** Constructor. The object will be initialized with 
        default values. */
        inline ComputationCallback() {}


        META_Object( osgCompute, ComputationCallback );

        /** Do customized event or update callback code.
        @param[in] computation Reference to the computation the callback is attached to.
        @param[in] nv Reference to the node visitor.
        */
        virtual void operator()( Computation& computation, osg::NodeVisitor& nv ) {};

    protected:
        /** Destructor. 
        */
        virtual ~ComputationCallback() {}


    private:
        /** Copy constructor. This constructor should not be called. */
        ComputationCallback( const ComputationCallback&, const osg::CopyOp& ) {}

        /** Copy operator. This operator should not be called. */
        ComputationCallback &operator=(const ComputationCallback &) { return *this; }
    };

    //! Interface for customized subload operations.
    /** A subload callback can be applied to memory objects to
    define customized callback behavior. A SubloadCallback
    is called at the end of the map() function and is to 
    change the data before returning a pointer to the user. It 
    is designed similar to the SubloadCallback for osg::Texture 
    objects.
    */
    class LIBRARY_EXPORT SubloadCallback : public virtual osg::Object
    {
    public:
        /** Constructor. The object will be initialized 
        with default values. */
        inline SubloadCallback() {}

        META_Object( osgCompute, SubloadCallback );

        /** Do customized callback code. Overload this method
        to change the memory before returning form a memorie's map() function. 
        @param[in] mappedPtr Pointer to the current mapped memory with byte offset.
        @param[in] mapping current required mapping.
        @param[in] offset byte offset to the memory space.
        @param[in] resource reference to the resource managing the memory.
        */
        virtual void subload( void* mappedPtr, unsigned int mapping, unsigned int offset, const Resource& resource ) const {};

        /** Do customized callback code. Overload this method
        to initialize the respective memory during the first call to map().
        @param[in] mappedPtr Pointer to the current mapped memory at current byte offset.
        @param[in] mapping Current mapping.
        @param[in] offset Byte offset to the memory space.
        @param[in] resource Reference to the memory resource.
        */
        virtual void load( void* mappedPtr, unsigned int mapping, unsigned int offset, const Resource& resource ) const {};

    protected:
        /** Destructor.
        */
        virtual ~SubloadCallback() {}


    private:
        /** Copy constructor. This constructor should not be called.*/
        SubloadCallback(const SubloadCallback&, const osg::CopyOp&) {}

        /** Copy operator. This operator should not be called.*/
        SubloadCallback &operator=(const SubloadCallback&) { return *this; }
    };

    //! Interface for customized launch order of computations.
    /** Callback class which is used for adding launch 
    callbacks to program nodes. This allows users to 
    customize the order in which computations are launched: 
    \code
    myProgram->setLaunchCallback( new MyCallback );
    ...
    class MyCallback : public osgCompute::LaunchCallback
    {
        virtual void operator()( osgCompute::Program& program )
        {
            osgCompute::ComputationList& computations = program.getComputations();
            computations[1]->launch();
            computations[2]->launch();
            computations[0]->launch();
            ...
        }
    };
    \endcode
    */
    class LIBRARY_EXPORT LaunchCallback : public virtual osg::Object
    {
    public:
        /** Constructor. The object will be initialized 
        with default values. */
        inline LaunchCallback() {}

        META_Object( osgCompute, LaunchCallback );

        /** Overwrite the default launch behavior for a program node.
        Is called whenever the program is executed. 
        @param[in] program Reference to the program
        */
        virtual void operator()( Program& program ) {};

    protected:
        /** Destructor. Release the memory by calling clearLocal(). */
        virtual ~LaunchCallback() {}

    private:
        /** Copy constructor. This constructor should not be called. */
        LaunchCallback( const LaunchCallback&, const osg::CopyOp& ) {}

        /** Copy operator. This operator should not be called. */
        LaunchCallback &operator=(const LaunchCallback &) { return *this; }
    };

    //! Callback for OpenGL memory render targets.
    /** Callback is either attached to a camera or a drawable object. Each GLMemory object that is updated
        during rendering, e.g. as a render target (FBO) requires such a callback to be notified. The callback
        calls mapAsRenderTarget() for each observed object (see GLMemoryTargetCallback::observe()) when it is
        launched during the rendering traversal (for a camera this is when osgUtil::RenderStage::draw() is running
        and for a Drawable this is during osgUtil::RenderLeaf::draw()). To properly setup such a callback for GLMemory 
        use the following lines:
        \code
        osg::ref_ptr<osgCompute::GLMemoryTargetCallback> myRTTCallback = new osgCompute::GLMemoryTargetCallback;
        myRTTCallback->observe( *renderTexture->getMemory() );
        rttCamera->setPreDrawCallback( myRTTCallback );
        \endcode
        In this case rttCamera is a camera which renders into a FrameBufferObject with renderTexture attached.
        Please see also the osgRTTdemo example how to use it.
	*/
    class LIBRARY_EXPORT GLMemoryTargetCallback : public osg::Camera::DrawCallback, public osg::Drawable::DrawCallback
    {
    public:
        /** Constructor. 
        */
        GLMemoryTargetCallback();

        META_Object(osgCompute, GLMemoryTargetCallback);

        /**
        Callback functions for cameras. If callback is attached to camera it notifies all its observed GLMemory
        objects when drawable is rendered. I.e. it calls mapAsRenderTarget() for all GLMemory objects.
        @param[in] renderInfo reference to the RenderInfo object.
        */
        virtual void operator () (osg::RenderInfo& renderInfo ) const;

        /**
        Callback functions for cameras. If callback is attached to camera it notifies all its observed GLMemory
        objects when drawable is rendered. I.e. it calls mapAsRenderTarget() for all GLMemory objects.
        @param[in] camera the camera object which is activated.
        */
        virtual void operator () (const osg::Camera& camera ) const;

        /**
        Callback functions for drawables. If callback is attached to drawable it notifies all its observed GLMemory
        objects when drawable is rendered. I.e. it calls mapAsRenderTarget() for all GLMemory objects.
        @param[in] renderInfo reference to the RenderInfo object.
        @param[in] drawable the drawable object which is rendered.
        */
        virtual void drawImplementation(osg::RenderInfo& renderInfo,const osg::Drawable* drawable ) const;

        /**
        Add GLMemory object for observation. For each observed object mapAsRenderTarget() is called 
        when callback is launched.
        @param[in] memory pointer to the GLmemory object to be notified during GL rendering.
        */
        virtual void observe( GLMemory* memory );

        /**
        Remove GLMemory object.
        @param[in] memory pointer to the GLmemory object to be removed.
        */
        virtual void remove( GLMemory* memory );

        /**
        Remove GLMemory object with specific identifier.
        @param[in] identifier identifier of the GLmemory to be removed.
        */
        virtual void remove( const std::string& identifier );

        /**
        Remove all GLMemory objects
        */
        virtual void removeAll();
                
        /**
        Returns the number of observed GLMemory objects.
        @return Returns the number of observed GLMemory objects.
        */
        virtual unsigned int getNumObserved() const;
                
        /**
        Returns true if the GLMemory is observed.
        @param[in] memory a pointer to the GL memory object.
        @return Returns true if the GLMemory is observed.
        */
        virtual bool observesGLMemory( GLMemory* memory ) const;

        /**
        Returns true if the GLMemory with identfier is observed.
        @param[in] identifier the identifier of the GL memory object.
        @return Returns true if the GLMemory is observed.
        */
        virtual bool observesGLMemory( const std::string& identifier ) const;

        /**
        Returns a reference to the observed GLMemory object list.
        @return Returns a reference to the observed GLMemory object list.
        */
        virtual std::vector< osg::observer_ptr<GLMemory> >& getObservedMemoryList();

        /**
        Returns a reference to the observed GLMemory object list.
        @return Returns a reference to the observed GLMemory object list.
        */
        virtual const std::vector< osg::observer_ptr<GLMemory> >& getObservedMemoryList() const;

    protected:
        /** Destructor.
        */
        virtual ~GLMemoryTargetCallback() {}

    private:
        std::vector< osg::observer_ptr<GLMemory> > _memories;

    private:
        // Copy constructor and operator should not be called
        GLMemoryTargetCallback( const GLMemoryTargetCallback& , const osg::CopyOp& ) {}
        GLMemoryTargetCallback& operator=(const GLMemoryTargetCallback&) { return (*this); }
    };
}

#endif //OSGCOMPUTE_CALLBACK
