/* osgCompute - Copyright (C) 2008-2009 SVT Group
*                                                                     
* This library is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as
* published by the Free Software Foundation; either version 3 of
* the License, or (at your option) any later version.
*                                                                     
* This library is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of 
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesse General Public License for more details.
*
* The full license is in LICENSE file included with this distribution.
*/

#ifndef OSGCOMPUTE_PROGRAM
#define OSGCOMPUTE_PROGRAM 1

#include <vector>
#include <osg/Object>
#include <osg/NodeVisitor>
#include <osgCompute/Export>
#include <osgCompute/Resource>
#include <osgCompute/Callback>

namespace osgCompute
{
    class Program;

    typedef std::vector<osg::ref_ptr<osgCompute::Program> >                          ProgramList;
    typedef std::vector<osg::ref_ptr<osgCompute::Program> >::iterator                ProgramListItr;
    typedef std::vector<osg::ref_ptr<osgCompute::Program> >::const_iterator          ProgramListCnstItr;
}

#define OSGCOMPUTE_CREATE_PROGRAM_FUNCTION		osgComputeCreateProgramFunc
#define OSGCOMPUTE_CREATE_PROGRAM_FUNCTION_STR	"osgComputeCreateProgramFunc"

#if defined(_MSC_VER) || defined(__CYGWIN__) || defined(__MINGW32__) || defined( __BCPLUSPLUS__) || defined( __MWERKS__)
#	define OSGCOMPUTE_PROGRAM_EXPORT				__declspec( dllexport )
#else
#   define OSGCOMPUTE_PROGRAM_EXPORT
#endif 

typedef osgCompute::Program* (*OSGCOMPUTE_CREATE_PROGRAM_FUNCTION_PTR)( void );

namespace osgCompute
{
    //! Base class for (parallel) algorithms
    /**
	A program is the base class to implement application specific 
	parallel algorithms working on resources. Programs implement a
	strategy design pattern in connection with a computation node. Think of a 
	program as a separated algorithm executed once in each frame like osg::Program objects 
	are executed during rendering. However, programs are much more flexible as 
	execution is handed over to the program.	The following code shows a simple example 
	how to define a program. Your own program at least has to implement the launch() method 
	as it is done in the osgGeometry example:
	<br />
	\code
	class Warp : public osgCompute::Program
	{
	public:
		Warp() {}

		virtual void launch()
		{ 
			//... Warp Cow Geometry ...
		}
	}
	\endcode
	<br />
	Programs are usually used in combination with computation nodes.
	A program then is attached to a computation node an will be 
	executed either during the update cycle or during the 
	render cycle (see osgCompute::Computation). 
	launch() is called frequently every time 
	a computation node is traversed. If the program is disabled the launch()
	method is not called. During launch() an OpenGL-context
	is available allowing for interoperability resources like
	textures or geometry objects (see Interoperability).
	
	<br />
	A computation node will hand over all resources to each attached program via 
	acceptResource(). Overwrite this method to get access to resources 
	of a computation node. Identification of specific resources is done by name:
	<br />
	\code
	class Warp : public osgCompute::Program
	{
	public:
		virtual void acceptResource( osgCompute::Resource& resource )
		{
			if( resource.isIdentifiedBy("WARP_GEOMETRY") )
				_vertices = dynamic_cast<osgCompute::Memory*>( &resource );	
		}

		virtual void launch()
		{
			void* devPtr = _vertices->map();
			//...Warp cow vertices on GPU...
		}

	private:
		osg::ref_ptr<osgCompute::Memory> _vertices;
	}
	\endcode
	<br />
	 
	You are not limited to scene graph resources and its very easy to 
	define own resources like timers. 
	<br />
	A program can have an event callback or update callback to watch out for events 
	or changes to the graph.
    */
    class LIBRARY_EXPORT Program : public Resource
    {
    public:
        /** Constructor. 
        */
        Program();

        META_Object( osgCompute, Program )

        /** The launch method is the core function of each algorithm. A computation node will call launch of its
        programs in each frame as long as the program returns true on isEnabled().
        */
        virtual void launch();

        /** The accept resource method exchanges resources between this programs and other programs that are spread throughout
        the current graph. A program can use the isIdentifiedBy() method of a resource.
        @param[in] resource Reference to the resource.
        */
        virtual void acceptResource( Resource& resource );

        /** The accept resource method exchanges resources between this programs and other programs that are spread throughout
        the current graph. Param resourceIdentifier should be used to identify the resource.
        @param[in] resource Reference to the resource.
        @param[in] resourceIdentifier resource identifier.
        */
        virtual void acceptResource( Resource& resource, const std::string& resourceIdentifier );

        /** Users should (not necessarily) overwrite this method and return true if a resource with this identifier 
        is referenced by this program.
        @param[in] identifier The identifier of the resource.
        @return Returns true if program utilizes the resource.
        */
        virtual bool usesResource( const std::string& identifier ) const;

        /** Users should (not necessarily) overwrite this method in order to remove the referenced resource.
        @param[in] resource Reference to the resource.
        */
        virtual void removeResource( const Resource& resource );

        /** Users should (not necessarily) overwrite this method in order to remove the resource with the identifier.
        @param[in] identifier The identifier of the resource.
        */
        virtual void removeResource( const std::string& identifier );

        /** Users should (not necessarily) overwrite this method to return the resource with this identifier and NULL if the 
        the resource is not used.
        @param[in] identifier The identifier of the resource.
        @return Returns a pointer to the resource. NULL if it is not found.
        */
        virtual Resource* getResource( const std::string& identifier );

        /** Users should (not necessarily) overwrite this method to return the resource with this identifier and NULL if the 
        the resource is not used.
        @param[in] identifier The identifier of the resource.
        @return Returns a pointer to the resource. NULL if it is not found.
        */
        virtual const Resource* getResource( const std::string& identifier ) const;

        /** Users should (not necessarily) overwrite this method and return all utilized resources with the identifier in resource list.
        @param[out] resourceList A list of all resources with the identifier.
        @param[in] identifier The identifier of the resource.
        */
        virtual void getResources( ResourceList& resourceList, const std::string& identifier );

        /** Users should (not necessarily) overwrite this method and return all utilized resources in resource list.
        @param[out] resourceList A list of all resources of the program.
        */
        virtual void getAllResources( ResourceList& resourceList );

        /** Setup an update callback. During the update traversal this method will be called.
        Note that the program still might be launched in the update-cycle 
        (see osgCompute::ProgramCallback for further information).
        @param[in] uc A pointer to the callback.
        */
        virtual void setUpdateCallback( ProgramCallback* uc );

        /** Returns a pointer to the update callback.
        @return Returns the callback. NULL if no callback is utilized. 
        */
        virtual ProgramCallback* getUpdateCallback();

        /** Returns a pointer to the update callback.
        @return Returns the callback. NULL if no callback is utilized. 
        */
        virtual const ProgramCallback* getUpdateCallback() const;

        /** Add a event callback. An event callback is launched during the
        event-traversal of the scene 
        (see osgCompute::ProgramCallback for further information).
        @param[in] ec A pointer to the callback.
        */
        virtual void setEventCallback( ProgramCallback* ec );

        /** Returns a pointer to the event callback. 
        @return Returns the callback. NULL if no callback is utilized.
        */
        virtual ProgramCallback* getEventCallback();

        /** Returns a pointer to the event callback.
        @return Returns the callback. NULL if no callback is utilized.
        */
        virtual const ProgramCallback* getEventCallback() const;

        /** A program is enabled by default. An enabled program can be executed. With this
        flag programs can be switched off and turned on easily.
        */
        virtual void enable();

        /** Use this function to disable a program and prevent it from being launched.
        */
        virtual void disable();

        /**
        @return Returns true if the program is enabled*/
        virtual bool isEnabled() const;

        /** Returns the dynamic library name of the program. The library name is required during
        the dynamic load (See loadProgram() ).
        @return Returns the string reference with the library name.
        */
        virtual const std::string& getLibraryName() const;

        /** Returns the library name of the program. The library name is required during
        the dynamic load (See loadProgram() ).
        @return Returns the string reference with the library name.
        */
        virtual std::string& getLibraryName();

        /** Set the library name of this program. The library name is required during
        the dynamic load (See loadProgram()).
        @param[in] libraryName the string reference with the library name.
        */
        virtual void setLibraryName( const std::string& libraryName );

        /** Use this function to load a program as a dynamic library. osgDB methods are
        utilized to encapsulate platform dependent dynamic linking. After the program
        has been loaded the function will return
        a pointer to a new object of type program. If the load fails then NULL is returned.
        @param[in] libraryName the library name of the program.
        */
        static Program* loadProgram( const std::string& libraryName );

        /** Returns true if osgDB can find a dynamic library with that library name. 
        @param[in] libraryName the library name.
        */
        static bool existsProgram( const std::string& libraryName );

    protected:	
        /**Destructor.
        */
        virtual ~Program() {}

    private:
        // copy constructor and operator should not be called
        Program( const Program&, const osg::CopyOp& ){}
        Program& operator=( const Program& copy ) { return (*this); }

        osg::ref_ptr<ProgramCallback>  _updateCallback;
        osg::ref_ptr<ProgramCallback>  _eventCallback;
        bool                               _enabled;
        std::string					       _libraryName;
    };
}

#endif //OSGCOMPUTE_PROGRAM
