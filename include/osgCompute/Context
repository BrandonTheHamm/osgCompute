/* osgCompute - Copyright (C) 2008-2009 SVT Group
 *                                                                     
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 3 of
 * the License, or (at your option) any later version.
 *                                                                     
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesse General Public License for more details.
 *
 * The full license is in LICENSE file included with this distribution.
*/

#ifndef OSGCOMPUTE_CONTEXT
#define OSGCOMPUTE_CONTEXT 1

#include <limits.h>
#include <vector>
#include <set>
#include <osg/Object>
#include <osg/State>
#include <osgCompute/Export>
#include <osgCompute/Resource>

namespace osgCompute
{
    class Context;
    class Resource;

    typedef std::map<unsigned int, osg::ref_ptr<Context> >                     ContextMap;
    typedef std::map<unsigned int, osg::ref_ptr<Context> >::iterator           ContextMapItr;
    typedef std::map<unsigned int, osg::ref_ptr<Context> >::const_iterator     ContextMapCnstItr;


    /**
    */
    class LIBRARY_EXPORT Context : public osg::Referenced
    {
    public:
        Context();

        virtual bool init();
        virtual void apply();

        virtual void setId( unsigned int id );
        virtual unsigned int getId() const;
        virtual void setState( osg::State& state );
        virtual osg::State* getState();
        virtual const osg::State* getState() const;
        virtual void removeState();
        virtual bool isStateValid() const;
        virtual void setDevice( int device );
        virtual int getDevice() const;

		virtual void clear();
		virtual bool isClear() const;

		static const Context* getContext( unsigned int id );
    protected:

        virtual ~Context();
        void clearLocal();

        unsigned int                        _id;
        osg::ref_ptr<osg::State>            _state;
        bool                                _clear;
        mutable OpenThreads::Mutex          _mutex;
        int                                 _device;
        bool                                _embedded;

    private:
        // copy constructor and operator should not be called
        Context(const Context& ,const osg::CopyOp& ) {}
        Context &operator=(const Context&) { return *this; }
    };
}

#endif //OSGCOMPUTE_CONTEXT

