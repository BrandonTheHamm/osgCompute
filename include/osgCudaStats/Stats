#ifndef SVTCUDA_STATISTICS
#define SVTCUDA_STATISTICS 1

#include <map>
#include <osg/Switch>
#include <osg/View>
#include <osgGA/GUIEventHandler>
#include <osgCuda/Export>
#include <osgCudaUtil/Timer>

namespace osgCuda 
{
    /** Event handler for adding on screen stats reporting to Viewers.*/
    class LIBRARY_EXPORT StatsHandler : public osgGA::GUIEventHandler 
    {
    public:
        enum StatsType
        {
            STATISTICS_NONE = 0,
            STATISTICS_MEMORY = 1,
            STATISTICS_TIMER = 2,
            STATISTICS_NUM_AVAILABLE,
        };

    public: 
        StatsHandler();

        virtual bool handle(const osgGA::GUIEventAdapter& ea, osgGA::GUIActionAdapter& aa);

        virtual void addModuleOfInterest( const std::string& moduleName );
        virtual void clearModulesOfInterest();

    protected:
        virtual ~StatsHandler() {}

        //bool createHUDCamera(osgViewer::ViewerBase* viewer);
        //void setUpMemoryScene(osgViewer::ViewerBase* viewer);
        //void setUpTimerScene(osgViewer::ViewerBase* viewer);
        //void clearScene(osgViewer::ViewerBase* viewer);

        bool createHUDCamera(osg::View* view);
        void removeHUDCamera(osg::View* view);
        void setUpMemoryScene();
        void setUpTimerScene();
        void clearScene();

        unsigned int                    _statsType;
        osg::ref_ptr<osg::Camera>       _hudCamera;
        osg::ref_ptr<osg::Switch>       _memorySwitch;
        unsigned int                    _statsWidth;
        unsigned int                    _statsHeight;
        std::set< std::string >         _modulesOfInterest;

    private:
        // copy constructor and operator should not be called
        StatsHandler( const StatsHandler&, const osg::CopyOp& ) {}
        StatsHandler& operator=( const StatsHandler& copy ) { return (*this); }
    };
}

#endif //SVTCUDA_STATISTICS